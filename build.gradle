buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
    }
}

plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'io.chino.library'
version = '3.3.1'
description = "Java SDK for Chino.io API"

JavaVersion latestSupportedLTS = JavaVersion.VERSION_11
JavaVersion minimumSupportedVersion = JavaVersion.VERSION_1_8
if(JavaVersion.current() != latestSupportedLTS) {
    System.err.println(
            String.format("(chino-java) WARNING: Java %s detected, but the current supported LTS version is Java %s." +
                    "Please consider upgrading to get all the latest security updates.",
                    JavaVersion.current(),
                    latestSupportedLTS
            )
    )
    sourceCompatibility = minimumSupportedVersion
    targetCompatibility = minimumSupportedVersion
} else {
    println "(chino-java) Using Java LTS version " + latestSupportedLTS
    sourceCompatibility = latestSupportedLTS
    targetCompatibility = latestSupportedLTS
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.13.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.9.8'
    implementation 'org.jetbrains:annotations:17.0.0'

    testImplementation 'junit:junit:4.12'
    testRuntime "org.slf4j:slf4j-api:1.7.25"
}

sourceSets {
    main.java {
        // remove placeholder file from build
        exclude '**/BuildConfig.java'
    }
}

build {
    // generate file BuildConfig during build
    dependsOn 'generateBuildConfig'
}

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    group = "Report"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacoco/jacocoHtml")
    }
}

buildConfig {
    charset = 'UTF-8'
    clsName = 'BuildConfig'
    packageName = 'io.chino.api.common'

    appName = project.name
    version = project.version
    /* add compile-time parameters below, e.g.:
           buildConfigField 'String', 'MY_STR_FIELD', '"my message to the app"'
           buildConfigField 'String', 'MY_STR_FIELD2', {
               'some lazy evaluated value'
           }
       etc, see more at
       https://github.com/mfuerstenau/gradle-buildconfig-plugin/blob/master/README.md
    */
    buildConfigField 'long', 'BUILD_UNIXTIME', System.currentTimeMillis() + 'L'
}

task testWithCoverage(type: GradleBuild) {
    // clean and recompile code for the current Java version.
    // required to automate tests for different JDK versions.
    tasks = ['clean', 'build', 'test', 'jacocoTestReport']
}